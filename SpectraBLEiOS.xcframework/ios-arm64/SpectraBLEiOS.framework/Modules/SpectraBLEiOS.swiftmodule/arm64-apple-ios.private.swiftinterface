// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios18.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SpectraBLEiOS
import AudioToolbox
import CommonCrypto
import CoreBluetooth
import CoreLocation
import Foundation
import Security
@_exported import SpectraBLEiOS
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum DeviceType : Swift.String {
  case INVALID
  case XP_PLUS
  case XP_READER_OLD
  case BIOT_OLD
  case BST3S
  case BSC3S
  case UST3S
  case BIOT_NEW
  case XP_READER_NEW_MTU
  case XP_PRO_HID
  case XP_PRO_SPECTRA
  case DITM
  case XPReader
  case XPReader2
  case Biot
  case Biostamp3s
  case Biosrible3s
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct DeviceConstant {
}
public enum Command {
  case punch
  public static func == (a: SpectraBLEiOS.Command, b: SpectraBLEiOS.Command) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SpectraBLEiOS.SpectraBLE : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  public func processPunching(for deviceId: Swift.String, device: SpectraBLEiOS.BLEDevice, midValue: Swift.Int)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, connectionEventDidOccur event: CoreBluetooth.CBConnectionEvent, for peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didUpdateANCSAuthorizationFor peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didReadRSSI RSSI: Foundation.NSNumber, error: (any Swift.Error)?)
  public func estimateDistance(fromRSSI rssi: Swift.Int, txPower: Swift.Int) -> Swift.Double
}
extension SpectraBLEiOS.SpectraBLE : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor descriptor: CoreBluetooth.CBDescriptor, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
}
extension SpectraBLEiOS.SpectraBLE : CoreBluetooth.CBPeripheralManagerDelegate {
  @objc dynamic public func peripheralManagerDidUpdateState(_ peripheral: CoreBluetooth.CBPeripheralManager)
  @objc dynamic public func peripheralManager(_ peripheral: CoreBluetooth.CBPeripheralManager, didReceiveRead request: CoreBluetooth.CBATTRequest)
  @objc dynamic public func peripheralManager(_ peripheral: CoreBluetooth.CBPeripheralManager, didReceiveWrite requests: [CoreBluetooth.CBATTRequest])
}
@_hasMissingDesignatedInitializers @objc public class BleSdkError : ObjectiveC.NSObject {
  @objc final public let errorCode: Swift.Int
  @objc final public let errorMessage: Swift.String
  @objc deinit
}
public struct BLEErrorDesc {
}
public struct BLEFailureMessage {
}
public struct BLENewMessages {
}
extension SpectraBLEiOS.SpectraBLE {
  @objc dynamic public func stopScan()
  @objc dynamic public func insertTapAndGoData(tag: Swift.String, destinationFloor: Swift.Int, boardingFloor: Swift.Int, selectedFloor: Swift.Int, sensitivity: Swift.Int)
  public func makePunch(tagId: Swift.String, destinationFloor: Swift.Int, boardingFloor: Swift.Int, selectedFloor: Swift.Int, deviceUniqueId: Swift.String)
  public func stopDeviceListTimer()
  @objc dynamic public func getSdkVersion()
  @objc dynamic public func removeKeychain()
  public func initialize(encryptionKey: Swift.String, bleTag: Swift.String, punchRange: Swift.Int, additionalInfo: Swift.String? = nil, callback: @escaping (SpectraBLEiOS.BLEEvent, Any) -> Swift.Void)
  public func startScan(callback: @escaping (SpectraBLEiOS.BLEEvent, Any) -> Swift.Void)
  public func getDeviceList(callback: @escaping (SpectraBLEiOS.BLEEvent, Any) -> Swift.Void)
}
extension SpectraBLEiOS.SpectraBLE {
  public var state: CoreBluetooth.CBManagerState? {
    get
  }
  public var error: SpectraBLEiOS.BleSdkError? {
    get
  }
}
@objc public class BLEData : ObjectiveC.NSObject {
  final public let code: Swift.Int
  final public let message: Swift.String
  final public let data: [SpectraBLEiOS.DeviceData]?
  final public let sdkVersion: Swift.String
  public init(code: Swift.Int, message: Swift.String, data: [SpectraBLEiOS.DeviceData]?, sdkVersion: Swift.String)
  convenience public init(code: Swift.Int, message: Swift.String)
  @objc deinit
}
public struct DeviceData : Swift.Codable {
  public let deviceName: Swift.String
  public let deviceType: Swift.String
  public let deviceID: Swift.String
  public let punchTime: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum BLEEvent {
  case SUCCESS
  case DEVICE_LIST
  case ERROR
  case UNKNOWN
  public static func == (a: SpectraBLEiOS.BLEEvent, b: SpectraBLEiOS.BLEEvent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class BLEDevice : Swift.Equatable {
  final public let peripheral: CoreBluetooth.CBPeripheral?
  public var advertisementData: [Swift.String : Any]?
  final public let rssi: Swift.Int?
  final public let deviceTypeInt: Swift.Int?
  public var rssiHistory: [Swift.Int]
  public var timestamp: Swift.Double
  public var isConnected: Swift.Bool
  public var isOutofRange: Swift.Bool
  public var wasPunched: Swift.Bool
  public var punchTimeStamp: Swift.Double?
  public var estimateDistance: Swift.Double?
  public var lastPunchTime: Swift.Double?
  public var lastPunchRSSI: Swift.Int?
  public var decisionArray: [Swift.Int]
  public var isPunchedIn: Swift.Bool
  public var isSecureDevice: Swift.Bool
  public init(peripheral: CoreBluetooth.CBPeripheral?, advertisementData: [Swift.String : Any]? = nil, rssi: Swift.Int?, deviceTypeInt: Swift.Int?, timestamp: Swift.Double, isSecureDevice: Swift.Bool = true, rssiHistory: [Swift.Int] = [0,0,0,0,0], decisionArray: [Swift.Int] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
  public static func == (lhs: SpectraBLEiOS.BLEDevice, rhs: SpectraBLEiOS.BLEDevice) -> Swift.Bool
  public var IsXPReader: Swift.Bool {
    get
  }
  public var IsXPReaderWithIntCheck: Swift.Bool {
    get
  }
  public func getDeviceType() -> Swift.String
  public var midPoint: Swift.Int? {
    get
  }
  public var manufactureData: Foundation.Data? {
    get
  }
  public var manufDataString: Swift.String? {
    get
  }
  public var deviceName: Swift.String? {
    get
  }
  public var peripheralId: Swift.String? {
    get
  }
  public var inOutFlag: Swift.String? {
    get
  }
  public var deviceType: Swift.String? {
    get
  }
  public var tapValue: Swift.String? {
    get
  }
  public var transactionLevel: Swift.Int? {
    get
  }
  @objc deinit
}
@objc public protocol BleManagerDelegate {
  @objc func onInitSuccess(SuccessMsg: Swift.String)
  @objc func onInitFailure(error: SpectraBLEiOS.BleSdkError)
  @objc func onScanSuccess(successMsg: Swift.String)
  @objc func onScanFailure(error: SpectraBLEiOS.BleSdkError)
  @objc func onBleManagerSuccess(successMsg: Swift.String)
  @objc func onBleManagerFailure(error: SpectraBLEiOS.BleSdkError)
  @objc func onCommandSendSuccess(successMsg: Swift.String)
  @objc func onGetDeviceListSuccess(successMsg: Swift.String, deviceArray: [[Swift.String : Any]])
  @objc func onGetDeviceListFailure(error: SpectraBLEiOS.BleSdkError)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class SpectraBLE : ObjectiveC.NSObject {
  public static let shared: SpectraBLEiOS.SpectraBLE
  @objc weak public var bleManagerDelegate: (any SpectraBLEiOS.BleManagerDelegate)?
  public var RSSIs: [Swift.Int]
  final public let RSSILength: Swift.Int
  final public let DecisionArrayLength: Swift.Int
  final public let DecisionArray: [Swift.Int]
  public var scannedDevices: [SpectraBLEiOS.BLEDevice]
  public var lScannedDevices: [SpectraBLEiOS.BLEDevice]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HttpUtility {
  public static let shared: SpectraBLEiOS.HttpUtility
  public var authenticationToken: Swift.String?
  public var customJsonDecoder: Foundation.JSONDecoder?
  public func reqeuest<T>(huRequest: SpectraBLEiOS.HURequest, resultType: T.Type, completionHandler: @escaping (Swift.Result<T?, SpectraBLEiOS.HUNetworkError>) -> Swift.Void) where T : Swift.Decodable
  @objc deinit
}
public enum HUHttpMethods : Swift.String {
  case get
  case post
  case put
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct HUNetworkError : Swift.Error {
}
public struct HURequest {
}
extension SpectraBLEiOS.DeviceType : Swift.Equatable {}
extension SpectraBLEiOS.DeviceType : Swift.Hashable {}
extension SpectraBLEiOS.DeviceType : Swift.RawRepresentable {}
extension SpectraBLEiOS.Command : Swift.Equatable {}
extension SpectraBLEiOS.Command : Swift.Hashable {}
extension SpectraBLEiOS.BLEEvent : Swift.Equatable {}
extension SpectraBLEiOS.BLEEvent : Swift.Hashable {}
extension SpectraBLEiOS.HUHttpMethods : Swift.Equatable {}
extension SpectraBLEiOS.HUHttpMethods : Swift.Hashable {}
extension SpectraBLEiOS.HUHttpMethods : Swift.RawRepresentable {}
